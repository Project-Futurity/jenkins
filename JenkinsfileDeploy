@Library('futurityPipelineLib') _

pipeline {
    agent any

    parameters {
        string(name: 'imageTag', trim: true, description: 'Image tag to be deployed')
        string(name: 'imageName', trim: true, description: 'Image name to be deployed')
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Validate') {
            steps {
                script {
                    required(params.imageName, 'Image name is not present')
                    required(params.imageTag, 'Image tag is not present')
                }
            }
        }

        /*stage('Deploy') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    input(message: "Deploy '${imageTag}'?", ok: 'Deploy')
                }
            }
        }*/

        stage('Deploying') {

            stages {
                stage('Preparing workspace') {
                    steps {
                        script {
                            withSsh {
                                sshUtils.prepareWorkspace(it)
                            }
                        }
                    }
                }

                stage('Up service') {
                    steps {
                        script {
                            withSsh {
                                sshUtils.upService(it, params.imageName, params.imageTag)
                            }
                        }
                    }
                }
            }

            post {
                always {
                    script {
                        withSsh {
                            echo 'Cleaning up'
                            sshUtils.clearWorkspace(it)
                        }
                    }
                }
            }
        }
    }
}

def required(def param, def errorMessage) {
    if (!param) {
        error(errorMessage)
    }
}